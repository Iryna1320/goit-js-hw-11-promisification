{"version":3,"sources":["webpack:///./task.js/task1.js","webpack:///./task.js/task2.js","webpack:///./task.js/task3.js"],"names":["delay","ms","Promise","reslove","setTimeout","logger","time","console","log","then","users","name","active","toggleUserState","allUsers","userName","map","user","promise","table","makeTransaction","transaction","min","max","Math","floor","random","reject","logSuccess","id","logError","warn","amount","catch"],"mappings":"iJAAMA,EAAQ,SAAAC,GAIZ,OAHgB,IAAIC,SAAQ,SAAAC,GAC1BC,YAAW,kBAAMD,EAAQF,QACxBA,IAICI,EAAS,SAAAC,GAAI,OAAIC,QAAQC,IAAR,kBAA8BF,EAA9B,OAGvBN,EAAM,KAAMS,KAAKJ,GACjBL,EAAM,KAAMS,KAAKJ,GACjBL,EAAM,MAAMS,KAAKJ,G,kCCZXK,EAAQ,CACZ,CAAEC,KAAM,QAASC,QAAQ,GACzB,CAAED,KAAM,OAAQC,QAAQ,GACxB,CAAED,KAAM,OAAQC,QAAQ,GACxB,CAAED,KAAM,MAAOC,QAAQ,IAGnBC,EAAkB,SAACC,EAAUC,GASjC,OARgB,IAAIb,SAAQ,SAAAC,GAC1BA,EACEW,EAASE,KAAI,SAAAC,GAAI,OACfA,EAAKN,OAASI,EAAd,iBAA8BE,EAA9B,CAAoCL,QAASK,EAAKL,SAAWK,UAQ/DZ,EAAS,SAAAa,GAAO,OAAIX,QAAQY,MAAMD,IAExCL,EAAgBH,EAAO,SAASD,KAAKJ,GACrCQ,EAAgBH,EAAO,OAAOD,KAAKJ,GCtBnC,IAIMe,EAAkB,SAAAC,GACtB,IALiCC,EAAKC,EAKhCvB,GAL2BsB,EAKO,IALFC,EAKO,IAJtCC,KAAKC,MAAMD,KAAKE,UAAYH,EAAMD,EAAM,GAAKA,IAgBpD,OAVgB,IAAIpB,SAAQ,SAACC,EAASwB,GACpCvB,YAAW,WACUoB,KAAKE,SAAW,IAGjCvB,EAAQkB,GAEVM,EAAON,QAERrB,IAIC4B,EAAa,SAAC,GAAiB,IAAfC,EAAe,EAAfA,GAAIvB,EAAW,EAAXA,KACxBC,QAAQC,IAAR,eAA2BqB,EAA3B,iBAA8CvB,EAA9C,OAGIwB,EAAW,SAAC,GAAW,IAATD,EAAS,EAATA,GAClBtB,QAAQwB,KAAR,gCAA6CF,EAA7C,8BAGFT,EAAgB,CAAES,GAAI,GAAIG,OAAQ,MAAOvB,KAAKmB,GAAYK,MAAMH,GAEhEV,EAAgB,CAAES,GAAI,GAAIG,OAAQ,MAAOvB,KAAKmB,GAAYK,MAAMH,GAEhEV,EAAgB,CAAES,GAAI,GAAIG,OAAQ,KAAMvB,KAAKmB,GAAYK,MAAMH,GAE/DV,EAAgB,CAAES,GAAI,GAAIG,OAAQ,MAAOvB,KAAKmB,GAAYK,MAAMH,G","file":"main.9f4ee471c1fd16a4dbbb.js","sourcesContent":["const delay = ms => {\r\n  const promise = new Promise(reslove => {\r\n    setTimeout(() => reslove(ms));\r\n  }, ms);\r\n  return promise;\r\n};\r\n\r\nconst logger = time => console.log(`Resolved after ${time}ms`);\r\n\r\n// Вызовы функции для проверки\r\ndelay(2000).then(logger); // Resolved after 2000ms\r\ndelay(1000).then(logger); // Resolved after 1000ms\r\ndelay(1500).then(logger); // Resolved after 1500ms\r\n","const users = [\r\n  { name: 'Mango', active: true },\r\n  { name: 'Poly', active: false },\r\n  { name: 'Ajax', active: true },\r\n  { name: 'Lux', active: false },\r\n];\r\n\r\nconst toggleUserState = (allUsers, userName) => {\r\n  const promise = new Promise(reslove => {\r\n    reslove(\r\n      allUsers.map(user =>\r\n        user.name === userName ? { ...user, active: !user.active } : user,\r\n      ),\r\n    );\r\n  });\r\n\r\n  return promise;\r\n};\r\n\r\nconst logger = promise => console.table(promise);\r\n\r\ntoggleUserState(users, 'Mango').then(logger);\r\ntoggleUserState(users, 'Lux').then(logger);\r\n","const randomIntegerFromInterval = (min, max) => {\r\n  return Math.floor(Math.random() * (max - min + 1) + min);\r\n};\r\n\r\nconst makeTransaction = transaction => {\r\n  const delay = randomIntegerFromInterval(200, 500);\r\n\r\n  const promise = new Promise((reslove, reject) => {\r\n    setTimeout(() => {\r\n      const canProcess = Math.random() > 0.3;\r\n\r\n      if (canProcess) {\r\n        reslove(transaction);\r\n      }\r\n      reject(transaction);\r\n    });\r\n  }, delay);\r\n  return promise;\r\n};\r\n\r\nconst logSuccess = ({ id, time }) => {\r\n  console.log(`Transaction ${id} processed in ${time}ms`);\r\n};\r\n\r\nconst logError = ({ id }) => {\r\n  console.warn(`Error processing transaction ${id}. Please try again later.`);\r\n};\r\n\r\nmakeTransaction({ id: 70, amount: 150 }).then(logSuccess).catch(logError);\r\n\r\nmakeTransaction({ id: 71, amount: 230 }).then(logSuccess).catch(logError);\r\n\r\nmakeTransaction({ id: 72, amount: 75 }).then(logSuccess).catch(logError);\r\n\r\nmakeTransaction({ id: 73, amount: 100 }).then(logSuccess).catch(logError);\r\n"],"sourceRoot":""}